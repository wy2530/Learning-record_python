'''
1、什么是迭代器
    迭代器指的是迭代取值的工具，迭代是一个重复的过程，
    每次重复是基于上一次的结果而继续的，单纯的重复不算迭代
2、为何要有迭代器
    迭代器是用来循环取值的工具，而涉及到把多个值循环取出来的 类 有：
        列表、字符串、元组、字典、集合、打开文件

        但是上述的迭代方式只适用于有索引的数据类型：列表、字符串、元组
        为了解决基于索引取值的局限性，python提供了一种不依赖索引的取值方式

3、如何用迭代器
    可迭代对象：但凡内置有__iter__方法的都称之为可迭代的对象
        将可迭代对象转化为迭代器对象
            可迭代对象.__iter__()=迭代器对象
        此时，对象为迭代器对象，并且添加了__next__的内置方法
    迭代器对象：内置有__next__方法并且内置有__iter__方法的对象
            迭代器对象.__next__()：可以得到迭代器的下一个值
            迭代器对象.__iter__():得到迭代器本身，调与不调没区别
    在迭代器对象下加上__iter__()方法：
        目的是为了使for循环的工作原理统一

'''
# 验证一下迭代器对象.__iter__():得到迭代器本身，调与不调没区别
# d={'a':1,'b':2,'c':3}
# d_iterator=d.__iter__()
# print(d_iterator.__iter__() is d_iterator)  #True


'''
4、可迭代对象与迭代器对象是有区别的:
 可迭代对象下没有__next__方法
 迭代器对象下有

可迭代对象有：字符串、列表、元组、字典、集合、文件对象
迭代器对象；文件对象

在以上可迭代对象中只有文件对象含有__next__方法
原因：迭代器对象比较省内存，因为调用一次__next__进一次内存，
    其他可迭代对象都不会有过多内容，而文件可能在一开始使用时就可能包含很多内容，
    为了节约内存，一开始就把文件设置成了迭代器对象
'''
# s1=''
# s1.__iter__()
# l=[]
# l.__iter__()
# d={'a':1}
# d.__iter__()


'''
# 调用可迭代对象下的__iter__方法会将其转换为可迭代器对象
# 调用转化为迭代器对象的__next__就是在取值
'''
# d={'a':1,'b':2,'c':3}
# d_iterator=d.__iter__()
# print(d_iterator.__next__()) #a
# print(d_iterator.__next__()) #b
# print(d_iterator.__next__()) #c
# print(d_iterator.__next__()) #会抛出异常 StopIteration

# 取值
# 第一次迭代器取值
# print("开始第一次迭代：")
# while True:
#     try:
#         print(d_iterator.__next__())
#     except StopIteration:  # 捕捉异常
#         break
# print("开始第二次迭代：")
# 第二次迭代器取值
# 会发现连续迭代时什么都取不出来，因为第一次已经取完了
# 如果想继续取值，只能在转换成迭代对象
# d_iterator=d.__iter__()
# while True:
#     try:
#         print(d_iterator.__next__())
#     except StopIteration:  # 捕捉异常
#         break


'''
如果使用while来进行可迭代对象的循环，步骤如下所示：
'''
d={'a':1,'b':2,'c':3}
d_iterator=d.__iter__()
while True:
    try:
        print(d_iterator.__next__())
    except StopIteration:  # 捕捉异常
        break


'''
5、如果使用for来进行可迭代对象的循环，步骤如下所示：
    可知for循环帮我们做了工作：
        1、将可迭代对象.__iter__() 得到迭代器对象
        2、取迭代器对象的__next__()得到返回值，并且赋值给K
        3、循环往复步骤2，直到抛出StopIteration异常for循环便结束循环

在迭代器对象中加__iter__方法的目的是为了统一
  for K in XXX
无论XXX是可迭代对象还是迭代器对象都取__iter__()
'''
d={'a':1,'b':2,'c':3}
for k in d:
    print(k)

'''
6、迭代器优缺点：
优点：
    统一：不依赖索引取值
    省内存，在调用__next__时，内存中才有值，内存中只能有一个值
缺点：
    不可以跟数组一样，按索引取值，每次都需要遍历
    迭代器是一次性的，一次取完值后，不能连续取值，不然什么都没有
'''

'''
7、遗留问题：
    类似C++中的如果一开始并不知道要存的内容有多大，或者要存无穷多个，应该怎么存？
    可利用迭代器的办法，但是目前学到的都python内置的迭代器，无法改变
    因此有了下面要学的自定义迭代器----生成器
'''