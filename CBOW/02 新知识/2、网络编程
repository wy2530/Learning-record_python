1、CS架构与BS架构

CS
Client<========>Server

客户端软件(send)             服务端软件(recv)
操作系统                     操作系统
计算机硬件<=================>计算机硬件


BS
Browser<==========>Server

无论CS还是BS都需要网络通信，那什么是网络通信呢？

2、网络通信
网络存在的意义是跨地域数据传输===》称之为通信

用电话传输来介绍什么是网络：
    我-----电话线------英国人（英语）
    我-----电话线------日本人（日语）
    我-----电话线------中国人（汉语）

网络=物理链接介质(电话线)+互联网通信协议(不同的语言)

我们要研究的是协议：也就是通信标准


3、OSI有七层协议===》五层

详细内容见博客：
https://www.cnblogs.com/linhaifeng/articles/6129246.html#_label1



七层：
应用层
表示层
会话层
传输层(段)
网络层(包)
数据链路层(帧)
物理层(位)



五层：
应用层
传输层(段)
网络层(包)
数据链路层(帧)
物理层(位)         《=========交换机==========》   物理层

3.1 物理层：
    发送电信号
3.2 数据链路层(以太网协议)
协议规定：
    1)封装成数据帧
    2)数据帧为两部分=头+数据
        头包括：源地址和目标地址  (就是mac地址)
        数据：网络层整体的内容
    3)凡是接入互联网的主机必须有一块网卡，网卡出厂时的mac是唯一的

以太网协议采用的是广播(通信基本靠吼)的方式：在一个区域内，所有的计算机都能监听到，但是只有一个目标地址响应

现在的问题是：
    1、要所有的计算机都要连接到一起
    2、每一个数据都要拷贝/通信


3.3 网络层(ARP协议、IP协议)
    目的1：划分广播域：将所有的计算机进行分块，在每一个区域内(局域网)，采用广播的方式，不需要全连接

    ---             -----             -----
        ---         -----               -----
    ---             -----           -----

现在的问题是：
    每一个局域网之间不可以直接通信

    目的2：那么每一个局域网之间需要有一个接口(网关)去连接公网地址，通过公网地址来进行相互通信
    路线‘网关---》公网---》另一个网关’ 之间的协议为路由协议(不用深究)

IP协议的规定：
    1)封装成数据包
    2)数据包为两部分=头+数据
        头包括：源地址和目标地址  (就是IP地址)
        数据：传输层发过来的整体的内容


ipv4地址
子网掩码
合法的IP地址=IP地址/子网掩码地址(网络原理中的 区分ABCD类)

判断是否在同一个局域网，在的话不用很多复杂的操作


(源mac地址，目标mac地址)(源IP地址，目标IP地址) 数据
计算机事先知道的只有对方的IP地址
但是计算机的底层通信是基于以太网协议的mac地址通信

也就是说：计算机必须可以有一个机制可以将IP地址解析成mac地址
这个协议叫做地址解析协议(ARP)



两个计算机之间的通信：

1、先通过ARP来解析对方的IP，与自己的IP计算比较
2、查看是否在同一个局域网内
3、若在同一个局域网内，计算机1可以直接拿到计算机2的mac地址
（为什么需要拿到mac后在发广播包呢？）
    发送广播包
        所以的计算机都可以收到，
4、若不在同一个局域网内，计算机之间需要通过网关来进行通信，也就是说计算机1可以拿到网关的mac地址



总结：

1、做软件需要从客户端软件send到服务端软件recv，那必须首先要做的是计算机1找到计算机2
mac地址标识的是局域网内的唯一地址
IP地址标识的是哪一个局域网

mac地址+IP地址可以标识全世界范围内独一无二的的一台计算机
有了ARP协议，可以解析之后，可以说：IP地址可以标识全世界范围内独一无二的的一台计算机

2、需要找到计算机2中多种软件中的一个，需要用的是 端口地址(在传输层)

那么可以说mac地址+ip地址+端口地址可以标识唯一的一个应用程序


今日内容：

3.4 传输层 TCP/UDP协议 ==》基于端口
    端口范围0-65535，0-1023为系统占用端口

    ip+port==》标识全世界范围内独一无二的一个基于 "网络通信" 的应用程序

    基于TCP协议的通信：必须是双向通信的链接(类似于管道)
    三次握手建立连接：



应用层：
    可以自定义协议==》头部+数据部分

        自定义协议需要注意的问题：
        1、两大组成部分=头部+数据部分
            头部：放对数据的描述信息(数据长度，数据类型等)
            数据部分：数据
        2、头部的长度必须固定
            因为接收端需要获取头部的信息来解包

    C/S架构都可以自己写，B/S架构需要用主流的浏览器通信协议
        http https ftp

不需要每操作一个数据吗，就写一个封装、解包的过程
有一些工具直接封装了应用层以下的东西操作，例如socket



TCP协议的握手和状态都要熟悉：
三次握手建立连接
    客户端和服务端有两个状态

    客户端                               服务端
    SYN_SENT(connect())---------------LISTEN(listen()大部分处于监听)----SYN_RCVD
    ESTABLISHED-----------------------ESTABLISHED

    有一种攻击就是一直在请求，占用资源
    或者是超级多的进程也会
TCP是可靠传输的：
        因为每发一个数据，服务端一定要回应

UDP是不可靠的传输：
        不用建立双向连接也不用等对方确认

四次挥手断开连接

    服务端会最先发起请求

    ps:当服务端大量处于TIME_WAIT状态时意味着服务端正在经历大量高并发

TCP协议半连接池(backlog)：类似一种队列
    [链接请求1，链接请求2...]


一会上完英语课，去查看一下TCP的握手和状态，+半连接池

5、socket介绍
在应用层时不用套接字，在基于网络传输时可以使用套接字
套接字是将应用层以下部分做了封装，提供的接口为socket

IP地址是如何获取到的：
1、静态获取：手动配置
2、动态获取：通过dhcp获取

DNS协议：域名解析协议
查询过程是UDP协议
将 ip ==变成==》域名 +浏览器自动加的端口号80 去访问网页

通过mac+ip+port找到了应用程序后，还需要url( 统一资源定位符 )去找具体的路径(虚拟的)

具体要查询的东西需要四个地址：
    mac+ip+port+url


本周内容：
    基于TCP协议的套接字通信

    基于UDP协议的套接字通信

    解决TCP协议的粘包问题

    socketserver支持并发

    （操作系统）并发编程理论

    多道技术

    多进程








